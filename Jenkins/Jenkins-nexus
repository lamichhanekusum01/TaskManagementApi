pipeline {
    agent any

    tools {
        nodejs 'NodeJs' // Assumes you've set up NodeJS in Jenkins Global Tool Configuration
        maven 'Maven'   // Assumes you've set up Maven in Jenkins Global Tool Configuration
    }

    environment {
        SCANNER_HOME = tool 'SonarQubeScanner'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    bat 'npm install'
                }
            }
        }

        stage('Build') {
            steps {
                withCredentials([file(credentialsId: 'npm-nexus-creds', variable: 'mynpmrc')]) {
                    echo 'Building...'
                    echo "%mynpmrc%" // For Windows, use % instead of $
                    bat '''
                        npm set audit false
                        npm install --no-audit --userconfig %mynpmrc% --registry http://localhost:8081/repository/npm-private --loglevel verbose
                    '''
                    echo 'Building Completed'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        bat """
                            %SCANNER_HOME%\\bin\\sonar-scanner ^
                            -Dsonar.host.url=http://localhost:9000/ ^
                            -Dsonar.token=squ_946bf8fd906acd5951dc95a565d79c22dd02741b ^
                            -Dsonar.projectName="nodeapp" ^
                            -Dsonar.exclusions=**/node_modules/** ^
                            -Dsonar.projectKey=nodeapp ^
                            -Dsonar.userHome=C:\\JenkinsSonarCache
                        """
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    sleep(time: 20, unit: 'SECONDS') // Sleep to wait for the status to update
                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status == 'IN_PROGRESS') {
                        sleep(time: 20, unit: 'SECONDS') // Sleep to wait for the status to update
                        error "Quality Gate is still in progress. Retrying..."
                    }

                    if (qualityGate.status != 'OK') {
                        error "Quality Gate failed: ${qualityGate.status}"
                    } else {
                        echo "Quality Gate passed: ${qualityGate.status}"
                    }
                }
            }
        }

        stage('Publish to Nexus') {
            steps {
                withCredentials([file(credentialsId: 'npm-nexus-creds', variable: 'mynpmrc')]) {
                    echo 'Publishing to Nexus...'
                    bat 'npm publish --userconfig %mynpmrc% --loglevel verbose'
                }
            }
        }
    }

    post {
        failure {
            echo 'Pipeline failed.'
        }
    }
}
